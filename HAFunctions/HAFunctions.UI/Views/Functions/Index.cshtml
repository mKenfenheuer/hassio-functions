@using HAFunctions.Shared
@model IEnumerable<HAFunctions.Shared.Models.FunctionModel>
@{
    ViewData["Title"] = "Functions";

}

@section Navbar
{
    <a class="btn btn-danger" asp-action="New">New Function</a>
}

@for(var Index = 0; Index < Model.Count(); Index++)
{
    var item = Model.ElementAt(Index);
    <div class="accordion mt-4" id="accordion-@Index">
        <div class="accordion-item">
            <h2 class="accordion-header" id="heading-@Index">
                <button class="accordion-button bg-homeassistant text-light" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@Index" aria-expanded="false" aria-controls="collapse-@Index">
                    <img src="~/img/ha_function_file.svg" height="40" class="me-2" />@item.FileName
                </button>
            </h2>
            <div id="collapse-@Index" class="accordion-collapse collapse @(item == Model.First() ? "show" : "")" aria-labelledby="heading-@Index" data-bs-parent="#accordion-@Index">
                <div class="accordion-body d-flex flex-column-reverse flex-md-row">
                    <div class="flex-grow-1 flex-shrink-1">
                        <p><strong>The following methods with trigger attributes were detected in the file:</strong></p>
                        @foreach (var method in item.DefinedFunctionModels)
                        {
                            <p><code class="text-dark">
                            @foreach(var trigger in method.Attributes)
                            {
                                <span class="ha-function-bracket">@Html.Raw("[")</span><span class="ha-function-type">@(trigger.Name)</span>@Html.Raw("<span class=\"ha-function-methodname\">(</span>")
                                @for(var i = 0; i < trigger.Parameters.Count; i++)
                                {
                                    var a = trigger.Parameters[i];
                                    @Html.Raw($"{a.Name}:") <span class="ha-function-string">@Html.Raw($"{a.Value?.ToString()}")</span>if(i+1 < trigger.Parameters.Count){@Html.Raw(", ")}
                                }
                                @Html.Raw(")")<span class="ha-function-bracket">@Html.Raw("]")</span><br/>
                            }
                            <span class="ha-function-type">@method.ReturnType.GetTypeName()</span> <span class="ha-function-methodname">@method.Name</span><span class="ha-function-bracket">(</span>@foreach(var param in @method.Parameters) {<span class="ha-function-type">@param.Type.GetTypeName()</span> @param.Name if(param != method.Parameters.LastOrDefault()) {<span>,</span>}}<span class="ha-function-bracket">) @Html.Raw("{")</span> ... <span class="ha-function-bracket">@Html.Raw("}")</span></code></p>
                        }
                    </div>
                    <div class="actions d-flex flex-column">
                        <a class="btn btn-primary mb-2" asp-action="Edit" asp-route-file="@item.FileName">Edit</a>
                        <a class="btn btn-info mb-2" asp-action="Log" asp-route-file="@item.FileName">Logs</a>
                        <a class="btn btn-danger mb-2" asp-action="Delete" asp-route-file="@item.FileName">Delete</a>
                    </div>                   
                </div>
            </div>
        </div>
    </div>
}
